

from pickle import NONE
import socket
import os
import string
import threading
from datetime import datetime
# Hàm nhận tên file từ client
def received_prop_filename(socket, file_name):
    file_name = socket.recv(1024).decode(FORMAT)
    socket.sendall(f"Received file name: {file_name}".encode(FORMAT))
    print(f"Tên file nhận được: {file_name}")
    return file_name
# Hàm nhận kích thước file từ client
def received_prop_filesize(socket, file_size):
    # Nhận kích thước file
    file_size = int(socket.recv(1024).decode(FORMAT))
    socket.sendall(f"Received file size: {file_size}".encode(FORMAT))
    print(f"Kích thước file nhận được: {file_size} bytes")
    return file_size
# hàm kiểm tra xem file có tồn tại trên server không
def check_exist_file_on_server(file_name,save_path,folder_username):
    #check file da ton tai tren server chua
    file_name_check=save_path+folder_username+"//"+file_name
    print(file_name_check)
    if not os.path.exists(file_name_check):
        return 1
    else:
        return 2
    #Hàm kiểm tra tài khoản đăng nhập
def check_account(inputusername,inputpassword):
   
    with open('account.txt','r') as file: #Mở file "account.txt" trong chế độ đọc với lệnh file để đảm bảo file sẽ đóng sao khi thực hiện
        check_legit=False
        for line in file:
            accountdetails=line.strip() #xóa các kí tự thừa ở đầu và cuối dòng
            accountdetails=accountdetails.split() #Chia username và password thành các thành phần trong mảng
            if inputusername in line and accountdetails[1]==inputpassword: #kiểm tra username có nằm ở dòng hiện tại không,nếu có thì kiểm tra mật khẩu
                check_legit=True
                break
        return check_legit         
# Hàm nhận dữ liệu file từ client và lưu vào server                   
def received_data_server( socket, file_name, file_size,folder_username,save_path):
        file_save_path=save_path+folder_username+"//"+file_name    #Đường dẫn lưu file(Có thể thay đổi tùy máy)
        # # Lưu file với tên gốc
        with open(file_save_path, "wb") as f:
            received = 0
            while received < file_size:
                chunk = socket.recv(min(1024, file_size - received))  # Đọc khối dữ liệu
                if not chunk:
                    break
                f.write(chunk)
                received += len(chunk)
                percent=received/file_size*100
                print(f"Đã nhận {received}/{file_size} bytes {percent}%")
        print(f"File {file_name} đã được lưu thành công.")
        socket.sendall("đã được lưu thành công".encode(FORMAT))
# Hàm gửi thông tin về file bao gồm tên file và kích thước tới client
def send_prop(socket, file_name, file_size):
        print(f"Tên file: {file_name}, Kích thước: {file_size} bytes")
        # Gửi tên file trước
        socket.sendall(file_name.encode(FORMAT))
        server_msg = socket.recv(1024).decode(FORMAT)  # Nhận phản hồi
        print("SERVER TRA LOI:", server_msg)
        # Gửi kích thước file
        socket.sendall(str(file_size).encode(FORMAT)) #ép kiểu kích thước file thành chuỗi str để gửi
# Hàm gửi dữ liệu file từ server tới client        
def send_data(socket, file_name, file_size,save_path,folder_username):
    absolute_filename=save_path+folder_username+"//"+file_name #đường dẫn của file
    with open(absolute_filename, mode='rb') as f: #Mở file để đọc ở chế dộ nhị phân
        send=0
        while True:  # Vòng lặp vô hạn
            # Đọc tối đa 1024 byte dữ liệu từ file (trong 1 vòng lặp)
            chunk = f.read(1024)
                        
            # Nếu chunk rỗng (tức đã đọc hết file), thoát khỏi vòng lặp
            if not chunk:
                break
                    
             #Nếu chunk không rỗng -> Gửi khối dữ liệu hiện tại qua socket
            socket.sendall(chunk)
            send+=len(chunk)
            percent=send/file_size*100
            print(f"Đã tải {send}/{file_size} bytes {percent}%")
                # In thông báo sau khi toàn bộ file đã được gửi
    print("Đã gửi file thành công.")  
    f.close()
# Hàm xử lý các yêu cầu từ client    
def handle_client(socket, addr):
    
    msg = ""
    file_name=None
    file_size=None
    save_path = "D://Học Tập//Nhapmonlaptrinh//Thuc hanh//SERVER//SEVER_ADVANCE//" #Đường dẫn lưu trữ trên server
    try:
       
        msg = None
        while msg != "end": #Vòng lặp cho đến khi client gửi end
            msg = socket.recv(1024).decode(FORMAT) #Nhận yêu cầu từ server
            print(f"Client {addr} talk: {msg}")
            if msg == "upload": #Trường hợp client yêu cầu upload file
                socket.sendall("Ready to recv file".encode(FORMAT)) #Gửi thông báo đã sẵn sàng nhận file từ client
                Numfiles=int(socket.recv(1024).decode(FORMAT)) #Nhận số lượng file từ client
                print(Numfiles)
                socket.sendall("Xac nhan so luong file".encode(FORMAT)) 
                for i in range(Numfiles):    #Vòng lặp để tải tất cả các file
                    file_name = received_prop_filename(socket, file_name) #Nhận tên file
                    file_size = received_prop_filesize(socket, file_size) #Nhận kích thước file
                    kiem_tra=check_exist_file_on_server(file_name,save_path,folder_username)
                    print(kiem_tra)
                    if kiem_tra==1:
                        print("1")
                        received_data_server( socket, file_name, file_size,folder_username,save_path)
                        write_history("upload",folder_username,file_name,socket)  
                        
                    elif kiem_tra==2:
                        split=file_name.split(".")
                        
                        print("2")
                        k=1
                        file_name_check=split[0]+"("+str(k)+")"+"."+split[1]
                        print("2")
                        while check_exist_file_on_server(file_name_check,save_path,folder_username)==2:
                            k=k+1
                            file_name_check=split[0]+"("+str(k)+")"+"."+split[1]
                        
                        received_data_server( socket, file_name_check, file_size,folder_username,save_path)
                        write_history("upload",folder_username,file_name_check,socket)  
                        
                        
                        
            elif msg == "download": #Trường hợp client yêu cầu download từ server
                    socket.sendall("READY".encode(FORMAT)) #Thông báo sẵn sàng gửi file
                    file_name=socket.recv(1024).decode(FORMAT) #Nhận tên file từ client
                    file_path=path+"//"+file_name    #tìm đường dẫn của file trên server
                    file_size = os.path.getsize(file_path) #lấy kích thước file
                    socket.sendall(str(file_size).encode(FORMAT)) #Gửi kích thước file
                    msg=socket.recv(1024).decode(FORMAT) #Nhận thông báo của client
                    print(msg)
                    send_data(socket, file_name, file_size,save_path,folder_username)
                    write_history("download",folder_username,file_name,socket)  #Gửi file tới client
            elif msg=="get_list":
                path = save_path+folder_username
                dir_list = os.listdir(path) # Lấy danh sách các file trong thư mục
                for item in dir_list:
                    print(item)
                    socket.sendall(item.encode(FORMAT)) # Gửi tên các file tới client
                    socket.recv(1024)
                socket.sendall("end_list".encode(FORMAT)) # Gửi thông báo kết thúc danh sách tên file
            elif msg=="login":
                socket.sendall("login".encode(FORMAT)) #thông bào sẵn sàng đăng nhập
                username=socket.recv(1024).decode(FORMAT) #Nhận username từ client
                socket.sendall("recv username".encode(FORMAT))
                password=socket.recv(1024).decode(FORMAT) #Nhận password từ client
                if(check_account(username,password)==True):    
                    socket.sendall("true".encode(FORMAT)) #Gửi tín hiệu nếu login đúng
                    folder_username=username #Tạo thư mục cho người dùng
                    try:
                        os.mkdir(folder_username)
                        print(f"Directory '{folder_username}' created successfully.")
                    except FileExistsError:
                        print(f"Directory '{folder_username}' already exists.")
                    except PermissionError:
                        print(f"Permission denied: Unable to create '{folder_username}'.")
                    except Exception as e:
                        print(f"An error occurred: {e}")
                    print(f"Client connected: {addr}")
                    write_history("login",folder_username,file_name,socket)
                else:
                    socket.sendall("false".encode(FORMAT)) #Phản hồi nếu tài khoản không hợp lệ
            elif msg=="sign up":
                socket.sendall("ready".encode(FORMAT)) #Gửi phản hồi sẵn sàng  tạo tài khoản mới
                newusername=socket.recv(1024).decode(FORMAT)
                socket.sendall("recv username".encode(FORMAT))
                newpassword =socket.recv(1024).decode(FORMAT) 
                print(newusername)
                print(newpassword)
                
                with open('account.txt','r') as file:
                    check_username=False
                    check_password=False
                    for line in file:
                        accountdetails=line.strip()  # Đọc dữ liệu từ file tài khoản
                        accountdetails=accountdetails.split()
                        # Kiểm tra xem tên tài khoản đã tồn tại chưa
                        if newusername == accountdetails[0]:
                            check_username = True
                        #Kiểm tra mật khẩu đã tồn tại cho tên tài khoản này chưa
                        if newpassword == accountdetails[1]:
                            check_password = True 
                    if check_username==True:
                        socket.sendall("username exist".encode(FORMAT))
                    elif check_password==True:
                        socket.sendall("password exist".encode(FORMAT))
                    elif  check_username==True and  check_password==True:
                        socket.sendall("username and password exist".encode(FORMAT))
                    else:
                        socket.sendall("Account created successfully".encode(FORMAT))
                            
                        with open('account.txt', 'a') as file:
                                #Mở file và lưu tài khoản vừa tạo vào file
                            file.write(f"{newusername} {newpassword}\n") 
                file.close()
                                       
    except Exception as e:
        print(f"Lỗi xử lý clienta {addr}: {e}")
    finally:
        write_history("disconnect",folder_username,file_name,socket)
        socket.close()
        print(f"Client {addr} disconnected.")
def write_history(case,folder_username,file_name,socket):
    # datetime object containing current date and time
    now = datetime.now()
    dt_string = now.strftime("%Y-%m-%d %H:%M:%S")
    if(case=="login"):
        with open("history.txt","a") as f:
            f.write(f"{dt_string}: "+folder_username)
            f.write(" connect to server\n ")
         
    elif case=="upload":
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        with open("history.txt","a") as f:
            f.write(f"{dt_string}: ")
            f.write(folder_username)
            f.write(f" upload file // {file_name} \n ")
        
    elif case=="dowload":
         dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
         print("date and time =", dt_string)
         with open("history.txt","a") as f:
            f.write(f"{dt_string} :")
            f.write(folder_username)
            f.write(f" download file // {file_name}: ")
    elif case=="disconnect":
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        print("date and time =", dt_string)
        with open("history.txt","a") as f:
            f.write(f"{dt_string}: ")
            f.write(folder_username)
            f.write(" discconect server ")
    
HOST = "127.0.0.1"
SERVER_PORT = 65432
FORMAT = "utf8"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #Tạo một socket
s.bind((HOST, SERVER_PORT)) #Liên kết socket với địa chỉ IP và PORT của máy chủ
s.listen() #Lắng nghe kết nối từ client
print("SERVER SIDE")
print("server", HOST, SERVER_PORT)
print("Waiting for client")
try:
    while True:    
    #vòng lặp để chấp nhận kết nối từ các client
        conn, addr = s.accept() #Chấp nhận kết nối từ client
        print(f"Client {addr} connected.") 
        # Tạo một luồng mới để xử lý client
        client_thread = threading.Thread(target=handle_client, args=(conn, addr)) ##Khi đã có 1 client kết nối tới thì server sẽ tạo 1 luồng mới và mỗi luồng mới sẽ gọi hàm 'handle_client' để xử lí upload/download với 2 tham số tr vào hàm 'handle_client' là args=(conn,addr) vs conn là đối tượng kết nối, addr là địa chỉ client
        client_thread.daemon=True
        client_thread.start()
        ##Tiếp tục lắng nghe các kết nối từ các client khác (Vì vòng lặp này là vô tận)

except Exception as e:
    print("Lỗi server:", e)
finally:
    s.close()
