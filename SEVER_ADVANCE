

from pickle import NONE
import socket
import os
import string
import threading
def received_prop_filename(socket, file_name):
    file_name = conn.recv(1024).decode(FORMAT)
    conn.sendall(f"Received file name: {file_name}".encode(FORMAT))
    print(f"Tên file nhận được: {file_name}")
    return file_name
def received_prop_filesize(conn, file_size):
    # Nhận kích thước file
    file_size = int(conn.recv(1024).decode(FORMAT))
    conn.sendall(f"Received file size: {file_size}".encode(FORMAT))
    print(f"Kích thước file nhận được: {file_size} bytes")
    return file_size


def check_exist_file_on_server(file_name, file_size):
    #check file da ton tai tren server chua
    if not os.path.exists(file_name):
        return 1
    else:
        return 2

def check_account(inputusername,inputpassword):
   
    with open('account.txt','r') as file: #Mở file "account.txt" trong chế độ đọc với lệnh file để đảm bảo file sẽ đóng sao khi thực hiện
        check_legit=False
        for line in file:
            accountdetails=line.strip() #xóa các kí tự thừa ở đầu và cuối dòng
            accountdetails=accountdetails.split()
            if inputusername in line and accountdetails[1]==inputpassword: #kiểm tra username có nằm ở dòng hiện tại không,nếu có thì kiểm tra mật khẩu
                check_legit=True
                break
        return check_legit         
                    
def received_data_server( socket, file_name, file_size,folder_username):
        file_save_path="D://Học Tập//Nhapmonlaptrinh//Thuc hanh//SERVER//SEVER_ADVANCE//"+folder_username+"//"+file_name    
        # # Lưu file với tên gốc
        with open(file_save_path, "wb") as f:
            received = 0
            while received < file_size:
                chunk = socket.recv(min(1024, file_size - received))  # Đọc khối dữ liệu
                if not chunk:
                    break
                f.write(chunk)
                received += len(chunk)
                percent=received/file_size*100
                print(f"Đã nhận {received}/{file_size} bytes {percent}%")
        print(f"File {file_name} đã được lưu thành công.")
        conn.sendall("đã được lưu thành công".encode(FORMAT))
def send_prop(socket, file_name, file_size):
        print(f"Tên file: {file_name}, Kích thước: {file_size} bytes")
        # Gửi tên file trước
        socket.sendall(file_name.encode(FORMAT))
        server_msg = socket.recv(1024).decode(FORMAT)  # Nhận phản hồi
        print("SERVER TRA LOI:", server_msg)
        # Gửi kích thước file
        socket.sendall(str(file_size).encode(FORMAT)) #ép kiểu kích thước file thành chuỗi str để gửi
def send_data(socket, file_name, file_size,save_path,folder_username):
    absolute_filename=save_path+folder_username+"//"+file_name
    with open(absolute_filename, mode='rb') as f:
        send=0
        while True:  # Vòng lặp vô hạn
            # Đọc tối đa 1024 byte dữ liệu từ file (trong 1 vòng lặp)
            chunk = f.read(1024)
                        
            # Nếu chunk rỗng (tức đã đọc hết file), thoát khỏi vòng lặp
            if not chunk:
                break
                    
             #Nếu chunk không rỗng -> Gửi khối dữ liệu hiện tại qua socket
            socket.sendall(chunk)
            send+=len(chunk)
            percent=send/file_size*100
            print(f"Đã tải {send}/{file_size} bytes {percent}%")
                # In thông báo sau khi toàn bộ file đã được gửi
    print("Đã gửi file thành công.")  
    f.close()
def handle_client(conn, addr):
    
    msg = ""
    file_name=None
    file_size=None
    save_path = "D://Học Tập//Nhapmonlaptrinh//Thuc hanh//SERVER//SEVER_ADVANCE//"
    try:
       
        msg = None
        while msg != "end":
            msg = conn.recv(1024).decode(FORMAT)
            print(f"Client {addr} talk: {msg}")
            if msg == "upload":
                conn.sendall("Ready to recv file".encode(FORMAT))
                Numfiles=int(conn.recv(1024).decode(FORMAT))
                print(Numfiles)
                conn.sendall("Xac nhan so luong file".encode(FORMAT))
                for i in range(Numfiles):    
                    file_name = received_prop_filename(conn, file_name)
                    file_size = received_prop_filesize(conn, file_size)
                    received_data_server( conn, file_name, file_size,folder_username)
                
            elif msg == "download": 
                    conn.sendall("READY".encode(FORMAT))
                    file_name=conn.recv(1024).decode(FORMAT)
                    file_path=path+"//"+file_name    
                    file_size = os.path.getsize(file_path)
                    conn.sendall(str(file_size).encode(FORMAT))
                    msg=conn.recv(1024).decode(FORMAT)
                    print(msg)
                    send_data(conn, file_name, file_size,save_path,folder_username)
            elif msg=="get_list":
                path = "D://Học Tập//Nhapmonlaptrinh//Thuc hanh//SERVER//SEVER_ADVANCE//"+folder_username
                dir_list = os.listdir(path)
                for item in dir_list:
                    print(item)
                    conn.sendall(item.encode(FORMAT))
                    conn.recv(1024)
                conn.sendall("end_list".encode(FORMAT))
            elif msg=="login":
                conn.sendall("login".encode(FORMAT))
                username=conn.recv(1024).decode(FORMAT)
                conn.sendall("recv username".encode(FORMAT))
                password=conn.recv(1024).decode(FORMAT)
                if(check_account(username,password)==True):    
                    conn.sendall("true".encode(FORMAT))
                    folder_username=username
                    try:
                        os.mkdir(folder_username)
                        print(f"Directory '{folder_username}' created successfully.")
                    except FileExistsError:
                        print(f"Directory '{folder_username}' already exists.")
                    except PermissionError:
                        print(f"Permission denied: Unable to create '{folder_username}'.")
                    except Exception as e:
                        print(f"An error occurred: {e}")
                    print(f"Client connected: {addr}")
                else:
                    conn.sendall("false".encode(FORMAT))
            elif msg=="sign up":
                conn.sendall("ready".encode(FORMAT))
                newusername=conn.recv(1024).decode(FORMAT)
                conn.sendall("recv username".encode(FORMAT))
                newpassword =conn.recv(1024).decode(FORMAT) 
                print(newusername)
                print(newpassword)
                
                with open('account.txt','r') as file:
                    check_username=False
                    check_password=False
                    for line in file:
                        accountdetails=line.strip() 
                        accountdetails=accountdetails.split()
                        # Kiểm tra xem tên tài khoản đã tồn tại chưa
                        if newusername == accountdetails[0]:
                            check_username = True
                        #Kiểm tra mật khẩu đã tồn tại cho tên tài khoản này chưa
                        if newpassword == accountdetails[1]:
                            check_password = True 
                    if check_username==True:
                        conn.sendall("username exist".encode(FORMAT))
                    elif check_password==True:
                        conn.sendall("password exist".encode(FORMAT))
                    elif  check_username==True and  check_password==True:
                        conn.sendall("username and password exist".encode(FORMAT))
                    else:
                        conn.sendall("Account created successfully".encode(FORMAT))
                            
                        with open('account.txt', 'a') as file:
                                #Mở file và lưu tài khoản vừa tạo vào file
                            file.write(f"{newusername} {newpassword}\n") 
                file.close()
                                       
    except Exception as e:
        print(f"Lỗi xử lý clienta {addr}: {e}")
    finally:
        conn.close()
        print(f"Client {addr} disconnected.")







HOST = "127.0.0.1"
SERVER_PORT = 65432
FORMAT = "utf8"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, SERVER_PORT))
s.listen()
print("SERVER SIDE")
print("server", HOST, SERVER_PORT)
print("Waiting for client")

try:
    while True:#vòng lặp để chấp nhận kết nối từ các client
        conn, addr = s.accept()
        print(f"Client {addr} connected.")
        
        # Tạo một luồng mới để xử lý client
        client_thread = threading.Thread(target=handle_client, args=(conn, addr)) ##Khi đã có 1 client kết nối tới thì server sẽ tạo 1 luồng mới và mỗi luồng mới sẽ gọi hàm 'handle_client' để xử lí upload/download với 2 tham số tr vào hàm 'handle_client' là args=(conn,addr) vs conn là đối tượng kết nối, addr là địa chỉ client
        client_thread.start()
        ##Tiếp tục lắng nghe các kết nối từ các client khác (Vì vòng lặp này là vô tận)

except Exception as e:
    print("Lỗi server:", e)
finally:
    s.close()
