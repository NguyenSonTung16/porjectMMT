from tkinter import * 
import socket
import time
import os
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
HOST = "127.0.0.1"
SERVER_PORT = 65432
FORMAT = "utf8"
def upload_file(file_paths, socket, button_notice,upload_window):
    # Gửi file lên server
        msg = "upload"
        socket.sendall(msg.encode(FORMAT)) #Gửi tín hiệu yêu cầu upload file cho server
        
        socket.recv(1024) #nhận phản hồi từ server
        try:
            numfiles=len(file_paths) #lấy số lượng file
            print(numfiles)
            socket.sendall(str(numfiles).encode(FORMAT)) #gửi số lượng file muốn upload cho server
            socket.recv(1024)
            print(msg)
            for i in range(numfiles):
                file_name = os.path.basename(file_paths[i]) #Lấy tên file
                file_size = os.path.getsize(file_paths[i]) # Lấy kích thước file
            
                # Gửi tên file
                socket.sendall(file_name.encode(FORMAT))
                print(msg)
                socket.recv(1024)  # Nhận phản hồi từ server
                print(msg)
                # Gửi kích thước file
                socket.sendall(str(file_size).encode(FORMAT))
                socket.recv(1024)  # Nhận phản hồi từ server để xác nhận kích thước
                
                # Gửi dữ liệu file
                percent = 0
                with open(file_paths[i], "rb") as f:
                    send = 0
                    while True:
                        chunk = f.read(1024)
                        if not chunk:
                            break
                        socket.sendall(chunk)
                        send += len(chunk)
                        percent = send / file_size * 100
                        button_notice.config(text=f"{file_name} {percent:.2f}%", fg="red")
                        upload_window.update_idletasks()
                print(f"Đã gửi file {file_name} thành công.")
                # Đợi server xử lý xong file này trước khi gửi file tiếp theo
                socket.recv(1024)  # Nhận phản hồi từ server để tiếp tục gửi file kế tiếp
                if i==numfiles-1:
                    print("Đã gửi toàn bộ file")
            print("Tất cả các file đã được gửi thành công.")
        
        except Exception as e:
            print(f"Error uploading file: {e}")


def uploadbuttoncheck(socket):
    # Tạo cửa sổ mới cho tính năng upload
    upload_window = tk.Toplevel()
    upload_window.title("Upload File")
    upload_window.geometry("600x400")
    # Tiêu đề cho cửa sổ upload
    label_upload = tk.Label(upload_window, text="Upload File", font=("Arial", 20))
    label_upload.pack(pady=20)
    file_paths=filedialog.askopenfilenames(title="Chọn file") #Mở browse file để chọn file muốn upload
    for file_path in file_paths:
        file_name=os.path.basename(file_path) #lấy tên file muốn upload từ địa chỉ của file đó
        label_filepath = tk.Label(upload_window, text=file_name, font=("Arial", 16))
        label_filepath.pack(pady=10)
    # Nút upload
    button_notice=tk.Label(upload_window,text="",font=("Arial",20))
    button_confirm_upload = tk.Button(upload_window,text="Upload",font=("Arial", 14),command=lambda:upload_file(file_paths,socket,button_notice,upload_window))
    button_confirm_upload.pack(pady=20)
    # Nút đóng cửa sổ
    button_close = tk.Button(upload_window,text="Close",font=("Arial", 14),command=upload_window.destroy)
    button_close.pack(pady=10)
    button_notice.pack(pady=10)

#Hàm download file được gọi khi ấn vào nút download
def download_file( socket, file_name,btnnotice,download_window):
        # # Lưu file với tên gốc
        socket.sendall("download".encode(FORMAT)) #gửi tín hiệu yêu cầu download cho server
        socket.recv(1024) #Nhận phản hồi từ server
        socket.sendall(file_name.encode(FORMAT)) #gửi tên file cho server
        file_size = int(socket.recv(1024).decode(FORMAT)) #Nhận kích thước file từ server
        socket.sendall("ok_properties".encode(FORMAT))#Gửi phản hồi để server tiếp tục gửi file
        
        #Gửi dữ liệu file
        percent = 0 
        with open(file_name, "wb") as f: #Mở file để ghi ở dạng nhị phân
            received = 0 #khởi tạo biến theo dõi số lượng byte đã nhận đc
            while received < file_size:
                chunk = socket.recv(min(1024, file_size - received))  # Nhận dữ liệu từng khối (chunk),kích thước không vượt quá 1024 bytes hoặc nhận số byte còn lại
                if not chunk:
                    break #Nếu không còn dữ kiệu thì kết thúc vòng lặp
                f.write(chunk) #Ghi khối dữ liệu nhận được vào file
                received += len(chunk) #Cập nhật số byte đã nhận
                percent=received/file_size*100
                btnnotice.config(text=f" {percent:.2f}%", fg="red") #Cập nhật lại phần trăm thông báo trên giao diện
                download_window.update_idletasks() #Cập nhật lại giao diện để hiển thị thay đổi
                print(f"Đã nhận {received}/{file_size} bytes {percent}%")
        print(f"File {file_name} đã được lưu thành công.")
        f.close()
#Cửa sổ download file        
def downloadfilecheck(username, socket):
    # Tạo cửa sổ mới cho tính năng download
    download_window = tk.Toplevel()
    download_window.title("Download File")
    window_width, window_height = 800, 600  # Kích thước cửa sổ
    download_window.geometry(f"{window_width}x{window_height}")

    # Tính vị trí lề trái cho các frame
    frame_width = 400  # Kích thước chiều rộng của các frame
    left_margin = (window_width - frame_width) // 2  # Lề trái trùng với lề giữa của cửa sổ

    # Tạo khung chính
    main_frame = Frame(download_window, width=frame_width, height=window_height)
    main_frame.place(x=left_margin, y=0)

    # Tạo canvas chứa nội dung có thể cuộn
    new_canvas = Canvas(main_frame, width=frame_width, height=window_height)
    new_canvas.pack(side=LEFT, fill=BOTH, expand=1)

    # Tạo frame con chứa các nút và thông báo
    second_frame = Frame(new_canvas, width=frame_width, height=window_height)
    new_canvas.create_window((0, 0), window=second_frame, anchor="nw")
    def on_mousewheel(event):
        new_canvas.yview_scroll(-1 * int(event.delta / 120), "units")  # Cuộn với con lăn chuột

    # Đăng ký sự kiện cuộn chuột
    download_window.bind_all("<MouseWheel>", on_mousewheel)

    # Khi canvas thay đổi kích thước, cập nhật lại vùng cuộn
    new_canvas.bind('<Configure>', lambda e: new_canvas.configure(scrollregion=new_canvas.bbox("all")))
    # Gửi yêu cầu lấy danh sách file
    msg = "get_list"
    socket.sendall(msg.encode(FORMAT))
    list_file = []
    item = socket.recv(1024).decode(FORMAT)
    while item != "end_list":
        list_file.append(item)
        socket.sendall(item.encode(FORMAT))
        item = socket.recv(1024).decode(FORMAT)

    # Tạo danh sách các nút và thông báo
    btn = []  # Danh sách các nút tải xuống
    btnnotice = []  # Danh sách các nhãn thông báo tải xuống
    for i in range(len(list_file)):
        btn.append("Button" + list_file[i])
        btnnotice.append("Button_notice" + list_file[i])

    # Thêm các label và nút vào trong frame
    for i in range(len(list_file)):
        # Tạo label hiển thị tên file
        label_filename = tk.Label(second_frame, text=list_file[i], font=("Arial", 16))
        label_filename.pack(pady=5)

        # Tạo label thông báo tải xuống
        btnnotice[i] = tk.Label(second_frame, text="", font=("Arial", 12))
        btnnotice[i].pack(pady=2)

        # Tạo button để tải xuống
        btn[i] = tk.Button(second_frame, text="Download", font=("Arial", 14),
                           command=lambda c=i: download_file(socket, list_file[c], btnnotice[c], download_window))
        btn[i].pack(pady=5)

    # Tạo nút đóng cửa sổ
    button_close = tk.Button(second_frame, text="Close", font=("Arial", 14), command=download_window.destroy)
    button_close.pack(pady=20)

  
def connect_to_server(socket):
    try:
        socket.connect((HOST, SERVER_PORT)) # Kết nối đến server sử dụng địa chỉ IP và PORT
        print("Client connected to server") 
        return 1
    except Exception as e:
        print(f"Error connecting to server: {e}") 
        return 0
def check_login(): 
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #Tạo socket client mới
        connected = connect_to_server(client) #Kết nối tới server
        if connected == 1:
            
            username=inputusername.get() #lấy thông tin nhập vào của ô nhập username
            password=inputpassword.get() #lấy thông tin nhập vào của ô nhập password
           
            client.sendall("login".encode(FORMAT)) #Gửi tín hiệu yêu cầu đăng nhập tới server
            client.recv(1024)
         
            client.sendall(username.encode(FORMAT)) #Gửi username cho server
            client.recv(1024)
            
            client.sendall(password.encode(FORMAT)) #Gửi password cho server
            msg_server=client.recv(1024).decode(FORMAT) #Nhận tín hiệu kiểm tra đăng nhập của server
            if msg_server=="true": #Tín hiệu trả về True thì vào giao diện chính
                window.destroy() #Xóa cửa sổ đang nhập
                newwindow=tk.Tk() #Tạo cửa sổ mới 
                newwindow.title("Menu")
                newwindow.geometry("600x400")
                button_uploadfile=tk.Button(newwindow,text="Upload file",width=20,font=("Arial",20),command=lambda:uploadbuttoncheck(client))
                button_uploadfile.pack(pady=10);
                button_downloadfile=tk.Button(newwindow,text="Download file",width=20,font=("Arial",20),command=lambda:downloadfilecheck(username,client))
                button_downloadfile.pack(pady=10)
                newwindow.mainloop()
                client.sendall("end".encode(FORMAT))
            else: #Tín hiệu trả về False thì in ra thông báo lỗi
                label_error.config(text="Invalid username or password", fg="red") #thay đổi tiêu đề in lỗi khi username hoặc password không đúng
                client.sendall("end".encode(FORMAT))
                print("Disconnect because invalid")
                client.close()
        else:
            label_error.config(text="Fail to connect to server", fg="red")
         
def check_createaccount(signup_inputusername, signup_inputpassword, signup_confirminputpassword, error_line):
    newusername=signup_inputusername.get() #Lấy username từ ô nhập
    newpassword= signup_inputpassword.get() #Lấy password từ ô nhập
    confirm_password = signup_confirminputpassword.get() 
    if newpassword != confirm_password:
        error_line.config(text="Passwords do not match", fg="red") #Kiểm tra password và confirm password có giống không,nếu không thì báo lỗi
        return
    
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #Tạo một socket client mới
    connected = connect_to_server(client) #Kết nối tới server
     
    if connected == 1: #Kết nối thành công 
            
            username=inputusername.get() #lấy thông tin nhập vào của ô nhập username
            password=inputpassword.get()
           
            client.sendall("sign up".encode(FORMAT)) #Gửi tín hiệu yêu cầu tạo tài khoản tới server
            
            msg_server=client.recv(1024).decode(FORMAT)
            print(msg_server)
            client.sendall(newusername.encode(FORMAT)) #Gửi username cho server
            
            msg_server=client.recv(1024).decode(FORMAT)
            print(msg_server)
            client.sendall(newpassword.encode(FORMAT)) #Gửi password cho server
            
            msg_server=client.recv(1024).decode(FORMAT)
            print(msg_server)
            
            if msg_server=="username exist":
                error_line.config(text="Username already exists", fg="red")
        
            elif msg_server=="password exist":
                error_line.config(text="Password already exists", fg="red")
        
            elif msg_server=="username and password exist":
                error_line.config(text="Username and Password already exists", fg="red")
            else:   
                error_line.config(text="Account created successfully", fg="green")
            client.sendall("end".encode(FORMAT))
            client.close()       
    else:
        error_line.config(text="Fail to connect to server", fg="red") #Sửa lại thông báo nếu không thể kết nối
        client.close()
#Cửa sổ đăng kí tài khoản                
def check_signup():
    signup_win=tk.Tk()
    signup_win.title("Sign Up")
    signup_win.geometry("600x400")
    signup_username=tk.Label(signup_win,text="username",font=("Arial", 20)) #tiêu đề của ô username
    signup_username.pack() #in tiêu đề lên cửa sổ
    signup_inputusername=tk.Entry(signup_win,width=16,font=("Arial",20)) #Ô nhập username
    signup_inputusername.pack() #in ô nhập username lên cửa sổ
    signup_password=tk.Label(signup_win,text="Password",font=("Arial",20)) #tiêu đề của ô mật khẩu
    signup_password.pack(pady=10) #in tiêu đề của ô mật khẩu
    signup_inputpassword=tk.Entry(signup_win,width=16,font=("Arial",20)) #Ô nhập mật khẩu
    signup_inputpassword.pack(pady=10) #in ô nhập mật khẩu lên cửa sổ
    signup_confirmpassword=tk.Label(signup_win,text=" Confirm password",font=("Arial",20)) #tiêu đề của ô mật khẩu
    signup_confirmpassword.pack(pady=10) #in tiêu đề của ô mật khẩu
    signup_confirminputpassword=tk.Entry(signup_win,width=16,font=("Arial",20)) #Ô nhập mật khẩu
    signup_confirminputpassword.pack(pady=10) #in ô nhập mật khẩu lên cửa sổ
    error_line=tk.Label(signup_win,text="",font=("Arial",14))
    error_line.pack(pady=10)
    Confirm_button=tk.Button(signup_win,text="Confirm",width=16,height=1, font=("Arial", 14),command=lambda:check_createaccount(signup_inputusername, signup_inputpassword, signup_confirminputpassword, error_line))
    Confirm_button.pack()
window=tk.Tk()
window.title("Sever")
window.geometry("600x400")
label_username=tk.Label(window,text="username",font=("Arial", 20)) #tiêu đề của ô username
label_username.pack() #in tiêu đề lên cửa sổ
inputusername=tk.Entry(window,width=16,font=("Arial",20)) #Ô nhập username
inputusername.pack() #in ô nhập username lên cửa sổ
label_password=tk.Label(window,text="Password",font=("Arial",20)) #tiêu đề của ô mật khẩu
label_password.pack(pady=10) #in tiêu đề của ô mật khẩu
inputpassword=tk.Entry(window,width=16,font=("Arial",20)) #Ô nhập mật khẩu
inputpassword.pack(pady=10) #in ô nhập mật khẩu lên cửa sổ
loginbutton=tk.Button(window,text="Login",width=16,height=1, font=("Arial", 14),command=lambda:check_login()) #Nút đăng nhập
loginbutton.pack(pady=10) # in nút đăng nhập lên cửa sổ,nút "login" cách 1 khoảng 10 dưới label "username"
signupbutton=tk.Button(window,text="Sign up",width=16,height=1,font=("Arial",14),command=lambda:check_signup()) #nút tạo tài khoản mới
signupbutton.pack(pady=10)
label_error = tk.Label(window, text="", font=("Arial", 14), fg="red")  #tiêu đề in ra khi có lỗi(để rỗng khi chưa có gì)
label_error.pack(pady=10)
window.mainloop() #khởi chạy giao diện
